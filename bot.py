import telebot
from telebot import types
from geopy.distance import geodesic
import sqlite3
import os

TOKEN = '7724168947:AAFzRrJxS6MqZeGFiDgbGylarYgFP2s4v3M'
bot = telebot.TeleBot(TOKEN)

conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    language TEXT,
    locations TEXT
)''')
conn.commit()

locations = {
    "–ù–µ—Å–≤–∏–∂—Å–∫–∏–π –∑–∞–º–æ–∫": (53.2225, 26.6917),
    "–ú–∏—Ä—Å–∫–∏–π –∑–∞–º–æ–∫": (53.4513, 26.4727),
    "–î–∞–ª—è–Ω—å-–±–æ–º–∂–∞–Ω—å": (39.084631,122.028821),
    "–î–∞–ª—è–Ω—å-–±–æ–º–∂–∞–Ω—å 2": (38.885634,121.546385)
}

def get_title(count):
    if count >= 31:
        return "üëë –í–µ–ª–∏–∫–∏–π –ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫"
    elif count >= 16:
        return "‚öîÔ∏è –†—ã—Ü–∞—Ä—å –ë–µ–ª–∞—Ä—É—Å–∏"
    elif count >= 6:
        return "üì∫ –ò—Å–∫–∞—Ç–µ–ª—å –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–π"
    elif count >= 1:
        return "üå± –Æ–Ω—ã–π –ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫"
    return "üôà –ë–µ–∑ —Ç–∏—Ç—É–ª–∞"

def get_lang(user_id):
    with sqlite3.connect('users.db') as temp_conn:
        temp_cursor = temp_conn.cursor()
        temp_cursor.execute("SELECT language FROM users WHERE user_id=?", (user_id,))
        row = temp_cursor.fetchone()
        return row[0] if row and row[0] else 'ru'

def get_main_markup(lang):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if lang == 'ru':
        markup.row('üß≠ –û—Ç–º–µ—Ç–∏—Ç—å—Å—è', 'üèÖ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è')
        markup.row('üë§ –ê–∫–∫–∞—É–Ω—Ç', '‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ')
        markup.row('üìú –ö–∞—Ä—Ç–∞', '‚ù§Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å')
    elif lang == 'be':
        markup.row('üß≠ –ê–¥–∑–Ω–∞—á—ã—Ü—Ü–∞', 'üèÖ –ú–∞–µ –¥–∞—Å—è–≥–Ω–µ–Ω–Ω—ñ')
        markup.row('üë§ –ê–∫–∞—û–Ω—Ç', '‚ÑπÔ∏è –ê–± –ø—Ä–∞–µ–∫—Ü–µ')
        markup.row('üìú –ö–∞—Ä—Ç–∞', '‚ù§Ô∏è –ü–∞–¥—Ç—Ä—ã–º–∞—Ü—å')
    else:
        markup.row('üß≠ Mark Location', 'üèÖ Achievements')
        markup.row('üë§ Account', '‚ÑπÔ∏è About')
        markup.row('üìú Map', '‚ù§Ô∏è Support')
    return markup

def process_name(message):
    user_id = message.from_user.id
    name = message.text.strip()
    cursor.execute("INSERT OR REPLACE INTO users (user_id, username, language, locations) VALUES (?, ?, ?, ?)",
                   (user_id, name, 'ru', ''))
    conn.commit()
    lang = get_lang(user_id)
    bot.send_message(user_id, f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}!", reply_markup=get_main_markup(lang))

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    lang = get_lang(user_id)
    cursor.execute("SELECT username FROM users WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    if not row or not row[0]:
        bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –Ω–∞—á–∞–ª–∞:")
        bot.register_next_step_handler(message, process_name)
    else:
        name = row[0]
        bot.send_message(user_id, f"–ü—Ä–∏—è—Ç–Ω–æ —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è, {name}!", reply_markup=get_main_markup(lang))

@bot.message_handler(func=lambda m: '–ê–∫–∫–∞—É–Ω—Ç' in m.text or '–ê–∫–∞—û–Ω—Ç' in m.text or 'Account' in m.text)
def account(message):
    user_id = message.from_user.id
    lang = get_lang(user_id)
    cursor.execute("SELECT username, locations FROM users WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    if row:
        name, locs = row
        visited = locs.split(',') if locs else []
        count = len(visited)
        title = get_title(count)
        bot.send_message(user_id, f"üë§ –ò–º—è: {name}\nüè∞ –ü–æ—Å–µ—â–µ–Ω–æ: {count}\nüõ° –¢–∏—Ç—É–ª: {title}", reply_markup=get_main_markup(lang))

@bot.message_handler(func=lambda m: '–ö–∞—Ä—Ç–∞' in m.text or 'Map' in m.text)
def show_map(message):
    user_id = message.from_user.id
    map_path = os.path.join(os.path.dirname(__file__), 'map.jpg')
    with open(map_path, "rb") as img:
        bot.send_photo(user_id, img, caption="üìú –í—Å–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–≥–æ –∫–≤–µ—Å—Ç–∞ —Å–æ–±—Ä–∞–Ω—ã –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–µ.")

@bot.message_handler(func=lambda m: '–û—Ç–º–µ—Ç–∏—Ç—å—Å—è' in m.text or '–ê–¥–∑–Ω–∞—á—ã—Ü—Ü–∞' in m.text or 'Mark Location' in m.text)
def mark_location(message):
    user_id = message.from_user.id
    lang = get_lang(user_id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True))
    bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=markup)

@bot.message_handler(content_types=['location'])
def location_handler(message):
    user_id = message.from_user.id
    lang = get_lang(user_id)
    user_coords = (message.location.latitude, message.location.longitude)
    matched = None
    for name, coord in locations.items():
        if geodesic(user_coords, coord).meters <= 1000:
            matched = name
            break

    cursor.execute("SELECT locations FROM users WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    visited = row[0].split(',') if row and row[0] else []

    if matched:
        if matched not in visited:
            visited.append(matched)
            cursor.execute("UPDATE users SET locations=? WHERE user_id=?", (','.join(visited), user_id))
            conn.commit()
            bot.send_message(user_id, f"üè∞ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å: {matched}!\n–í—Å–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–æ: {len(visited)}", reply_markup=get_main_markup(lang))
        else:
            bot.send_message(user_id, f"üìç –í—ã —É–∂–µ –±—ã–ª–∏ –≤: {matched}.", reply_markup=get_main_markup(lang))
    else:
        bot.send_message(user_id, "‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —Ä—è–¥–æ–º —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π —Ç–æ—á–∫–æ–π –∫–≤–µ—Å—Ç–∞.", reply_markup=get_main_markup(lang))

@bot.message_handler(func=lambda m: '–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è' in m.text or 'Achievements' in m.text)
def achievements(message):
    user_id = message.from_user.id
    lang = get_lang(user_id)
    cursor.execute("SELECT username, locations FROM users WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    if row:
        name, loc_str = row
        visited = loc_str.split(',') if loc_str else []
        count = len(visited)
        title = get_title(count)
        bot.send_message(user_id, f"üß≠ –£–∂–µ –º–Ω–æ–≥–æ–µ –ø—Ä–æ–π–¥–µ–Ω–æ, {name}, –Ω–æ —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Ç–æ–ª—å–∫–æ –≤–ø–µ—Ä–µ–¥–∏!\n\nüè∞ –ü–æ—Å–µ—â–µ–Ω–æ: {count}\nüõ° –¢–∏—Ç—É–ª: {title}", reply_markup=get_main_markup(lang))

@bot.message_handler(func=lambda m: '–û –ø—Ä–æ–µ–∫—Ç–µ' in m.text or 'About' in m.text)
def about(message):
    user_id = message.from_user.id
    lang = get_lang(user_id)
    bot.send_message(user_id, "VANDER- —ç—Ç–æ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ö–≤–µ—Å—Ç –ø–æ –ë–µ–ª–∞—Ä—É—Å–∏. –û—Ç–ø—Ä–∞–≤–ª—è–π—Å—è –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –∑–∞–º–∫–∞–º, –∫–æ—Å—Ç–µ–ª–∞–º –∏ –ø—Ä–∏—Ä–æ–¥–Ω—ã–º —á—É–¥–µ—Å–∞–º —Å—Ç—Ä–∞–Ω—ã.\n\nüåê –°–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞: https://vandrounik.by\nüõí –ö—É–ø–∏—Ç—å –ü–∞—à–ø–∞—Ä—Ç –≤–∞–Ω–¥—Ä–æ—û–Ω—ñ–∫ –ø–∞ –ë–µ–ª–∞—Ä—É—Å—ñ: https://wildberries.by/item", reply_markup=get_main_markup(lang))

@bot.message_handler(func=lambda m: '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å' in m.text or 'Support' in m.text)
def support(message):
    user_id = message.from_user.id
    lang = get_lang(user_id)
    bot.send_message(user_id, "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –∑–¥–µ—Å—å: https://boosty.to/vander", reply_markup=get_main_markup(lang))

bot.polling(none_stop=True)
